(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.rtc = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2

/**
 * Core functionality
 * @module rtc
 * @main rtc
 */


/**
 * Signaling and signaling channels
 * @module rtc.signaling
 * @main rtc.signaling
 */


/**
 * Internal helpers
 * @module rtc.internal
 * @main rtc.internal
 */

(function() {
  var bindHelper, compat;

  bindHelper = function(obj, fun) {
    if (fun == null) {
      return;
    }
    return fun.bind(obj);
  };

  exports.compat = compat = {
    PeerConnection: window.PeerConnection || window.webkitPeerConnection00 || window.webkitRTCPeerConnection || window.mozRTCPeerConnection,
    IceCandidate: window.RTCIceCandidate || window.mozRTCIceCandidate,
    SessionDescription: window.mozRTCSessionDescription || window.RTCSessionDescription,
    MediaStream: window.MediaStream || window.mozMediaStream || window.webkitMediaStream,
    getUserMedia: bindHelper(navigator, navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia),
    supported: function() {
      return (compat.PeerConnection != null) && (compat.IceCandidate != null) && (compat.SessionDescription != null) && (compat.getUserMedia != null);
    }
  };

}).call(this);

},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var Deferred, EventEmitter, Promise, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('./internal/promise'), Deferred = ref.Deferred, Promise = ref.Promise;

  EventEmitter = require('events').EventEmitter;


  /**
   * @module rtc
   */


  /**
   * A wrapper for RTCDataChannel. Used to transfer custom data between peers.
   * @class rtc.DataChannel
  #
   * @constructor
   * @param {RTCDataChannel} channel The wrapped native data channel
   * @param {Number} [max_buffer] The size of the send buffer after which we will delay sending
   */

  exports.DataChannel = (function(superClass) {
    extend(DataChannel, superClass);


    /**
     * A new messages was received. Triggers only after `connect()` was called
     * @event message
     * @param {ArrayBuffer} data The data received
     */


    /**
     * The channel was closed
     * @event closed
     */

    function DataChannel(channel, max_buffer) {
      this.channel = channel;
      this.max_buffer = max_buffer != null ? max_buffer : 1024 * 10;
      this._connected = false;
      this._connect_queue = [];
      this._send_buffer = [];
      this.channel.binaryType = 'arraybuffer';
      this.channel.onmessage = (function(_this) {
        return function(event) {
          if (!_this._connected) {
            return _this._connect_queue.push(event.data);
          } else {
            return _this.emit('message', event.data);
          }
        };
      })(this);
      this.channel.onclose = (function(_this) {
        return function() {
          return _this.emit('closed');
        };
      })(this);
      this.channel.onerror = (function(_this) {
        return function(err) {
          return _this.emit('error', err);
        };
      })(this);
    }


    /**
     * Connect to the DataChannel. You will receive messages and will be able to send after calling this.
     * @method connect
     * @return {Promise} Promise which resolves as soon as the DataChannel is open
     */

    DataChannel.prototype.connect = function() {
      var data, i, len, ref1;
      this._connected = true;
      ref1 = this._connect_queue;
      for (i = 0, len = ref1.length; i < len; i++) {
        data = ref1[i];
        this.emit('message', data);
      }
      delete this._connect_queue;
      return Promise.resolve();
    };

    DataChannel.prototype.close = function() {
      this.channel.close();
      return Promise.resolve();
    };


    /**
     * The label of the DataChannel used to distinguish multiple channels
     * @method label
     * @return {String} The label
     */

    DataChannel.prototype.label = function() {
      return this.channel.label;
    };


    /**
     * Send data to the peer through the DataChannel
     * @method send
     * @param data The data to be transferred
     * @return {Promise} Promise which will be resolved when the data was passed to the native data channel
     */

    DataChannel.prototype.send = function(data) {
      var defer;
      if (!this._connected) {
        this.connect();
        console.log("Sending without being connected. Please call connect() on the data channel to start using it.");
      }
      defer = new Deferred();
      this._send_buffer.push([data, defer]);
      if (this._send_buffer.length === 1) {
        this._actualSend();
      }
      return defer.promise;
    };


    /**
     * Method which actually sends the data. Implements buffering
     * @method _actualSend
     * @private
     */

    DataChannel.prototype._actualSend = function() {
      var data, defer, ref1, ref2, results;
      if (this.channel.readyState === 'open') {
        while (this._send_buffer.length) {
          if (this.channel.bufferedAmount >= this.max_buffer) {
            setTimeout(this._actualSend.bind(this), 1);
            return;
          }
          ref1 = this._send_buffer[0], data = ref1[0], defer = ref1[1];
          try {
            this.channel.send(data);
          } catch (_error) {
            setTimeout(this._actualSend.bind(this), 1);
            return;
          }
          defer.resolve();
          this._send_buffer.shift();
        }
      } else {
        results = [];
        while (this._send_buffer.length) {
          ref2 = this._send_buffer.shift(), data = ref2[0], defer = ref2[1];
          results.push(defer.reject(new Error("DataChannel closed")));
        }
        return results;
      }
    };

    return DataChannel;

  })(EventEmitter);

}).call(this);

},{"./internal/promise":4,"events":undefined}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var Deferred, EventEmitter, Promise, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('./promise'), Deferred = ref.Deferred, Promise = ref.Promise;

  EventEmitter = require('events').EventEmitter;


  /**
   * @module rtc.internal
   */


  /**
   * Helper which handles DataChannel negotiation for RemotePeer
   * @class rtc.internal.ChannelCollection
   */

  exports.ChannelCollection = (function(superClass) {
    extend(ChannelCollection, superClass);


    /**
     * A new data channel is available
     * @event data_channel_added
     * @param {String} name Name of the channel
     * @param {Promise -> rtc.Stream} stream Promise of the channel
     */

    function ChannelCollection() {
      this.channels = {};
      this.defers = {};
      this.pending = {};
      this.wait_d = new Deferred();
      this.wait_p = this.wait_d.promise;
    }


    /**
     * Set the local channel description.
     * @method setLocal
     * @param {Object} data Object describing each offered DataChannel
     */

    ChannelCollection.prototype.setLocal = function(data) {
      this.local = data;
      if (this.remote != null) {
        return this._update();
      }
    };


    /**
     * Set the remote channel description.
     * @method setRemote
     * @param {Object} data Object describing each offered DataChannel
     */

    ChannelCollection.prototype.setRemote = function(data) {
      this.remote = data;
      if (this.local != null) {
        return this._update();
      }
    };


    /**
     * Matches remote and local descriptions and creates promises common DataChannels
     * @method _update
     * @private
     */

    ChannelCollection.prototype._update = function() {
      var channel, config, defer, name, ref1;
      ref1 = this.remote;
      for (name in ref1) {
        config = ref1[name];
        if (this.local[name] != null) {
          if (this.channels[name] != null) {

          } else if (this.pending[name] != null) {
            channel = this.pending[name];
            delete this.pending[name];
            this.channels[name] = Promise.resolve(channel);
            this.emit('data_channel_added', name, this.channels[name]);
          } else {
            defer = new Deferred();
            this.channels[name] = defer.promise;
            this.defers[name] = defer;
            this.emit('data_channel_added', name, this.channels[name]);
          }
        } else {
          console.log("DataChannel offered by remote but not by local");
        }
      }
      for (name in this.local) {
        if (this.remote[name] == null) {
          console.log("DataChannel offered by local but not by remote");
        }
      }
      return this.wait_d.resolve();
    };


    /**
     * Resolves promises waiting for the given DataChannel
     * @method resolve
     * @param {DataChannel} channel The new channel
     */

    ChannelCollection.prototype.resolve = function(channel) {
      var label;
      label = channel.label();
      if (this.defers[label] != null) {
        this.defers[label].resolve(channel);
        return delete this.defers[label];
      } else {
        return this.pending[label] = channel;
      }
    };


    /**
     * Get a promise to a DataChannel. Will resolve if DataChannel was offered and gets initiated. Might reject after remote and local description are processed.
     * @method get
     * @param {String} name The label of the channel to get
     * @return {Promise -> DataChannel} Promise for the DataChannel
     */

    ChannelCollection.prototype.get = function(name) {
      return this.wait_p.then((function(_this) {
        return function() {
          if (_this.channels[name] != null) {
            return _this.channels[name];
          } else {
            throw new Error("DataChannel not negotiated");
          }
        };
      })(this));
    };

    return ChannelCollection;

  })(EventEmitter);

}).call(this);

},{"./promise":4,"events":undefined}],4:[function(require,module,exports){
(function (global){
// Generated by CoffeeScript 1.9.2

/**
 * @module rtc.internal
 */


/**
 * Alias for native promises or a polyfill if not supported
 * @class rtc.internal.Promise
 */

(function() {
  exports.Promise = global.Promise || require('es6-promise').Promise;


  /**
   * Helper to implement deferred execution with promises
   * @class rtc.internal.Deferred
   */


  /**
   * Resolves the promise
   * @method resolve
   * @param [data] The payload to which the promise will resolve
  #
   * @example
   *     var defer = new Deferred()
   *     defer.resolve(42);
   *     defer.promise.then(function(res) {
   *       console.log(res);   // 42
   *     }
   */


  /**
   * Reject the promise
   * @method reject
   * @param {Error} error The payload to which the promise will resolve
  #
   * @example
   *     var defer = new Deferred()
   *     defer.reject(new Error("Reject because we can!"));
   *     defer.promise.then(function(data) {
   *       // wont happen
   *     }).catch(function(err) {
   *       // will happen
   *     }
   */


  /**
   * The promise which will get resolved or rejected by this deferred
   * @property {Promise} promise
   */

  exports.Deferred = (function() {
    function Deferred() {
      this.promise = new exports.Promise((function(_this) {
        return function(resolve, reject) {
          _this.resolve = resolve;
          return _this.reject = reject;
        };
      })(this));
    }

    return Deferred;

  })();


  /**
   * Adds a timeout to a promise. The promise will be rejected if timeout is
   * reached. It will act like the underlying promise if it is resolved or
   * rejected before the timeout is reached.
   * @param {Promse} promise The underlying promise
   * @param {number} time Timeout in ms
   * @return {Promise} Promise acting like the underlying promise or timeout
   */

  exports.timeout = function(promise, time) {
    return new Promise(function(resolve, reject) {
      promise.then(resolve, reject);
      return setTimeout(function() {
        return reject(new Error('Operation timed out'));
      }, time);
    });
  };

}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"es6-promise":undefined}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var Deferred, EventEmitter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Deferred = require('./promise').Deferred;

  EventEmitter = require('events').EventEmitter;


  /**
   * @module rtc.internal
   */


  /**
   * Helper handling the mapping of streams for RemotePeer
   * @class rtc.internal.StreamCollection
  #
   * @constructor
   */

  exports.StreamCollection = (function(superClass) {
    extend(StreamCollection, superClass);


    /**
     * A new stream was added to the collection
     * @event steam_added
     * @param {String} name The user defined name of the stream
     * @param {Promise -> rtc.Stream} stream Promise to the stream
     */

    function StreamCollection() {

      /**
       * Contains the promises which will resolve to the streams
       * @property {Object} streams
       */
      this.streams = {};
      this._defers = {};
      this._waiting = {};
      this._pending = {};
      this.wait_d = new Deferred();
      this.wait_p = this.wait_d.promise;
    }


    /**
     * Set stream description and generate promises
     * @method update
     * @param data {Object} An object mapping the stream ids to stream names
     */

    StreamCollection.prototype.update = function(data) {
      var defer, i, id, len, members, name, ref, stream, stream_p;
      members = [];
      this._waiting = {};
      ref = this.streams;
      for (stream_p = i = 0, len = ref.length; i < len; stream_p = ++i) {
        name = ref[stream_p];
        if (data[name] == null) {
          delete this.streams[name];
          this.emit('stream_removed', name);
          if (stream_p.isFullfilled()) {
            stream_p.then(function(stream) {
              return stream.close();
            });
          } else if (stream_p.isPending()) {
            stream_p.reject(new Error("Stream removed before being established"));
          }
        }
      }
      for (name in data) {
        id = data[name];
        if (this.streams[name] == null) {
          defer = new Deferred();
          this.streams[name] = defer.promise;
          this._defers[name] = defer;
          this.emit('stream_added', name, defer.promise);
        }
        if (this._defers[name] != null) {
          if (this._pending[id] != null) {
            stream = this._pending[id];
            delete this._pending[id];
            this._defers[name].resolve(stream);
            delete this._defers[name];
          } else {
            this._waiting[id] = name;
          }
        }
      }
      return this.wait_d.resolve();
    };


    /**
     * Add stream to the collection and resolve promises waiting for it
     * @method resolve
     * @param {rtc.Stream} stream
     */

    StreamCollection.prototype.resolve = function(stream) {
      var id, name;
      id = stream.id();
      if (id === 'default') {
        if (Object.keys(this.streams).length === 1 && Object.keys(this._waiting).length === 1) {
          console.log("Working around incompatibility between Firefox and Chrome concerning stream identification");
          id = Object.keys(this._waiting)[0];
        } else {
          console.log("Unable to work around incompatibility between Firefox and Chrome concerning stream identification");
        }
      }
      if (this._waiting[id] != null) {
        name = this._waiting[id];
        delete this._waiting[id];
        this._defers[name].resolve(stream);
        return delete this._defers[name];
      } else {
        return this._pending[id] = stream;
      }
    };


    /**
     * Gets a promise for a stream with the given name. Might be rejected after `update()`
    #
     * @method get
     * @param {String} name
     * @return {Promise} The promise for the `rtc.Stream`
     */

    StreamCollection.prototype.get = function(name) {
      return this.wait_p.then((function(_this) {
        return function() {
          if (_this.streams[name] != null) {
            return _this.streams[name];
          } else {
            throw new Error("Stream not offered");
          }
        };
      })(this));
    };

    return StreamCollection;

  })(EventEmitter);

}).call(this);

},{"./promise":4,"events":undefined}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var exports, extend;

  extend = function(root, obj) {
    var key, value;
    for (key in obj) {
      value = obj[key];
      root[key] = value;
    }
    return exports;
  };

  module.exports = exports = {
    internal: {},
    signaling: {}
  };

  extend(exports, require('./peer'));

  extend(exports, require('./remote_peer'));

  extend(exports, require('./local_peer'));

  extend(exports, require('./peer_connection'));

  extend(exports, require('./stream'));

  extend(exports, require('./compat'));

  extend(exports, require('./room'));

  extend(exports, require('./video_element'));

  extend(exports.internal, require('./internal/stream_collection'));

  extend(exports.internal, require('./internal/channel_collection'));

  extend(exports.internal, require('./internal/promise'));

  extend(exports.signaling, require('./signaling/web_socket_channel'));

  extend(exports.signaling, require('./signaling/palava_signaling'));

  extend(exports.signaling, require('./signaling/calling_signaling'));

  extend(exports.signaling, require('./signaling/muc_signaling'));

}).call(this);

},{"./compat":1,"./internal/channel_collection":3,"./internal/promise":4,"./internal/stream_collection":5,"./local_peer":7,"./peer":8,"./peer_connection":9,"./remote_peer":10,"./room":11,"./signaling/calling_signaling":12,"./signaling/muc_signaling":13,"./signaling/palava_signaling":14,"./signaling/web_socket_channel":16,"./stream":17,"./video_element":18}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var Peer, Stream,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Peer = require('./peer').Peer;

  Stream = require('./stream').Stream;


  /**
   * @module rtc
   */


  /**
   * Represents the local user of the room
   * @class rtc.LocalPeer
   * @extends rtc.Peer
  #
   * @constructor
   */

  exports.LocalPeer = (function(superClass) {
    extend(LocalPeer, superClass);

    function LocalPeer() {

      /**
       * Contains promises of the local streams offered to all remote peers
       * @property streams
       * @type Object
       */
      this.streams = {};

      /**
       * Contains all DataChannel configurations negotiated with all remote peers
       * @property channels
       * @type Object
       */
      this.channels = {};
      this._status = {};
    }


    /**
     * Get an item of the status transferred to all remote peers
     * @method status
     * @param {String} key The key of the value. Will return
     * @return The value associated with the key
     */


    /**
     * Set an item of the status transferred to all remote peers
     * @method status
     * @param {String} key The key of the value. Will return
     * @param value The value to store
     */

    LocalPeer.prototype.status = function(key, value) {
      if (value != null) {
        this._status[key] = value;
        this.emit('status_changed', this._status);
      } else {
        return this._status[key];
      }
    };


    /**
     * Add data channel which will be negotiated with all remote peers
     * @method addDataChannel
     * @param {String} [name='data'] Name of the data channel
     * @param {Object} [desc={ordered: true}] Options passed to `RTCDataChannel.createDataChannel()`
     */

    LocalPeer.prototype.addDataChannel = function(name, desc) {
      if (typeof name !== 'string') {
        desc = name;
        name = this.DEFAULT_CHANNEL;
      }
      if (desc == null) {
        desc = {
          ordered: true
        };
      }
      this.channels[name] = desc;
      this.emit('configuration_changed');
    };


    /**
     * Add local stream to be sent to all remote peers
     * @method addStream
     * @param {String} [name='stream'] Name of the stream
     * @param {Promise -> rtc.Stream | rtc.Stream | Object} stream The stream, a promise to the stream or the configuration to create a stream with `rtc.Stream.createStream()`
     * @return {Promise -> rtc.Stream} Promise of the stream which was added
     */

    LocalPeer.prototype.addStream = function(name, obj) {
      var saveStream, stream_p;
      saveStream = (function(_this) {
        return function(stream_p) {
          _this.streams[name] = stream_p;
          _this.emit('configuration_changed');
          return stream_p;
        };
      })(this);
      if (typeof name !== 'string') {
        obj = name;
        name = this.DEFAULT_STREAM;
      }
      if ((obj != null ? obj.then : void 0) != null) {
        return saveStream(obj);
      } else if (obj instanceof Stream) {
        return saveStream(Promise.resolve(obj));
      } else {
        stream_p = Stream.createStream(obj);
        return saveStream(stream_p);
      }
    };


    /**
     * Get local stream
     * @method stream
     * @param {String} [name='stream'] Name of the stream
     * @return {Promise -> rtc.Stream} Promise of the stream
     */

    LocalPeer.prototype.stream = function(name) {
      if (name == null) {
        name = this.DEFAULT_STREAM;
      }
      return this.streams[name];
    };


    /**
     * Checks whether the peer is the local peer. Returns always `true` on this
     * class.
     * @method isLocal
     * @return {Boolean} Returns `true`
     */

    LocalPeer.prototype.isLocal = function() {
      return true;
    };

    return LocalPeer;

  })(Peer);

}).call(this);

},{"./peer":8,"./stream":17}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var EventEmitter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;


  /**
   * @module rtc
   */


  /**
   * A user in the room
   * @class rtc.Peer
   */

  exports.Peer = (function(superClass) {
    extend(Peer, superClass);

    function Peer() {
      return Peer.__super__.constructor.apply(this, arguments);
    }


    /**
     * The status of the peer has changed
     * @event status_changed
     * @param {Object} status The new status object
     */

    Peer.prototype.DEFAULT_CHANNEL = 'data';

    Peer.prototype.DEFAULT_STREAM = 'stream';


    /**
     * Get a value of the status object
     * @method status
     * @param {String} key The key 
     * @return The value
     */

    Peer.prototype.status = function(key) {
      throw new Error("Not implemented");
    };

    return Peer;

  })(EventEmitter);

}).call(this);

},{"events":undefined}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var DataChannel, Deferred, EventEmitter, Promise, Stream, compat, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('./internal/promise'), Deferred = ref.Deferred, Promise = ref.Promise;

  EventEmitter = require('events').EventEmitter;

  Stream = require('./stream').Stream;

  DataChannel = require('./data_channel').DataChannel;

  compat = require('./compat').compat;


  /**
   * @module rtc
   */


  /**
   * Wrapper around native RTCPeerConnection
  #
   * Provides events for new streams and data channels. Signaling information has
   * to be forwarded from events emitted by this object to the remote
   * PeerConnection.
  #
   * @class rtc.PeerConnection
   * @extends events.EventEmitter
  #
   * @constructor
   * @param {Boolean} offering True if the local peer should initiate the connection
   * @param {Object} options Options object passed on from `Room`
   */

  exports.PeerConnection = (function(superClass) {
    extend(PeerConnection, superClass);


    /**
     * New local ICE candidate which should be signaled to remote peer
     * @event ice_candiate
     * @param {Object} candidate The ice candidate
     */


    /**
     * New remote stream was added to the PeerConnection
     * @event stream_added
     * @param {rtc.Stream} stream The stream
     */


    /**
     * New DataChannel to the remote peer is ready to be used
     * @event data_channel_ready
     * @param {rtc.DataChannel} channel The data channel
     */


    /**
     * New offer or answer which should be signaled to the remote peer
     * @event signaling
     * @param {Object} obj The signaling message
     */


    /**
     * The PeerConnection was closed
     * @event closed
     */

    function PeerConnection(offering, options1) {
      var ice_servers;
      this.offering = offering;
      this.options = options1;
      ice_servers = [];
      this.no_gc_bugfix = [];
      if (this.options.stun != null) {
        ice_servers.push({
          url: this.options.stun
        });
      }
      if (this.options.turn != null) {
        ice_servers.push(this.options.turn);
      }
      this.pc = new compat.PeerConnection({
        iceServers: ice_servers
      });
      this.connect_d = new Deferred();
      this.connected = false;
      this.connect_d.promise["catch"](function() {});
      this.signaling_pending = [];
      this.pc.onicecandidate = (function(_this) {
        return function(event) {
          return _this.emit('ice_candidate', event.candidate);
        };
      })(this);
      this.pc.onaddstream = (function(_this) {
        return function(event) {
          return _this.emit('stream_added', new Stream(event.stream));
        };
      })(this);
      this.pc.ondatachannel = (function(_this) {
        return function(event) {
          return _this.emit('data_channel_ready', new DataChannel(event.channel));
        };
      })(this);
      this.pc.onremovestream = function(event) {};
      this.pc.onnegotiationneeded = (function(_this) {
        return function(event) {
          return console.log('onnegotiationneeded called');
        };
      })(this);
      this.pc.oniceconnectionstatechange = (function(_this) {
        return function() {
          var ref1;
          if (_this.pc.iceConnectionState === 'failed') {
            return _this._connectError(new Error("Unable to establish ICE connection"));
          } else if (_this.pc.iceConnectionState === 'closed') {
            return _this.connect_d.reject(new Error('Connection was closed'));
          } else if ((ref1 = _this.pc.iceConnectionState) === 'connected' || ref1 === 'completed') {
            return _this.connect_d.resolve();
          }
        };
      })(this);
      this.pc.onsignalingstatechange = function(event) {};
    }


    /**
     * Add new signaling information received from remote peer
     * @method signaling
     * @param {Object} data The signaling information
     */

    PeerConnection.prototype.signaling = function(data) {
      var sdp;
      sdp = new compat.SessionDescription(data);
      return this._setRemoteDescription(sdp).then((function(_this) {
        return function() {
          if (data.type === 'offer' && _this.connected) {
            return _this._answer();
          }
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this._connectError(err);
        };
      })(this));
    };


    /**
     * Add a remote ICE candidate
     * @method addIceCandidate
     * @param {Object} desc The candidate
     */

    PeerConnection.prototype.addIceCandidate = function(desc) {
      var candidate;
      if ((desc != null ? desc.candidate : void 0) != null) {
        candidate = new compat.IceCandidate(desc);
        return this.pc.addIceCandidate(candidate);
      } else {
        return console.log("ICE trickling stopped");
      }
    };


    /**
     * Returns the options for the offer/answer
     * @method _oaOptions
     * @private
     * @return {Object}
     */

    PeerConnection.prototype._oaOptions = function() {
      return {
        optional: [],
        mandatory: {
          OfferToReceiveAudio: true,
          OfferToReceiveVideo: true
        }
      };
    };


    /**
     * Set the remote description
     * @method _setRemoteDescription
     * @private
     * @param {Object} sdp The remote SDP
     * @return {Promise} Promise which will be resolved once the remote description was set successfully
     */

    PeerConnection.prototype._setRemoteDescription = function(sdp) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var description;
          description = new compat.SessionDescription(sdp);
          return _this.pc.setRemoteDescription(sdp, resolve, reject);
        };
      })(this));
    };


    /**
     * Create offer, set it on local description and emit it
     * @method _offer
     * @private
     */

    PeerConnection.prototype._offer = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.pc.createOffer(resolve, reject, _this._oaOptions());
        };
      })(this)).then((function(_this) {
        return function(sdp) {
          return _this._processLocalSdp(sdp);
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this._connectError(err);
        };
      })(this));
    };


    /**
     * Create answer, set it on local description and emit it
     * @method _offer
     * @private
     */

    PeerConnection.prototype._answer = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.pc.createAnswer(resolve, reject, _this._oaOptions());
        };
      })(this)).then((function(_this) {
        return function(sdp) {
          return _this._processLocalSdp(sdp);
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this._connectError(err);
        };
      })(this));
    };


    /**
     * Set local description and emit it
     * @method _processLocalSdp
     * @private
     * @param {Object} sdp The local SDP
     * @return {Promise} Promise which will be resolved once the local description was set successfully
     */

    PeerConnection.prototype._processLocalSdp = function(sdp) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var success;
          success = function() {
            var data;
            data = {
              sdp: sdp.sdp,
              type: sdp.type
            };
            _this.emit('signaling', data);
            return resolve(sdp);
          };
          return _this.pc.setLocalDescription(sdp, success, reject);
        };
      })(this));
    };


    /**
     * Mark connection attempt as failed
     * @method _connectError
     * @private
     * @param {Error} err Error causing connection to fail
     */

    PeerConnection.prototype._connectError = function(err) {
      this.connect_d.reject(err);
      console.log(err);
      return this.emit('error', err);
    };


    /**
     * Add local stream
     * @method addStream
     * @param {rtc.Stream} stream The local stream
     */

    PeerConnection.prototype.addStream = function(stream) {
      return this.pc.addStream(stream.stream);
    };


    /**
     * Remove local stream
     * @method removeStream
     * @param {rtc.Stream} stream The local stream
     */

    PeerConnection.prototype.removeSream = function(stream) {
      return this.pc.removeStream(stream.stream);
    };


    /**
     * Add DataChannel. Will only actually do something if `offering` is `true`.
     * @method addDataChannel
     * @param {String} name Name of the data channel
     * @param {Object} desc Options passed to `RTCPeerConnection.createDataChannel()`
     */

    PeerConnection.prototype.addDataChannel = function(name, options) {
      var channel;
      if (this.offering) {
        channel = this.pc.createDataChannel(name, options);
        this.no_gc_bugfix.push(channel);
        return channel.onopen = (function(_this) {
          return function() {
            return _this.emit('data_channel_ready', new DataChannel(channel));
          };
        })(this);
      }
    };


    /**
     * Establish connection with remote peer. Connection will be established once both peers have called this functio
     * @method connect
     * @return {Promise} Promise which will be resolved once the connection is established
     */

    PeerConnection.prototype.connect = function() {
      if (!this.connected) {
        if (this.offering) {
          this._offer();
        } else if (this.pc.signalingState === 'have-remote-offer') {
          this._answer();
        }
        this.connected = true;
      }
      return Promise.resolve(this.connect_d.promise);
    };


    /**
     * Close the connection to the remote peer
     * @method close
     */

    PeerConnection.prototype.close = function() {
      this.pc.close();
      return this.emit('closed');
    };

    return PeerConnection;

  })(EventEmitter);

}).call(this);

},{"./compat":1,"./data_channel":2,"./internal/promise":4,"./stream":17,"events":undefined}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var ChannelCollection, Peer, Promise, StreamCollection, merge,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Promise = require('./internal/promise').Promise;

  Peer = require('./peer').Peer;

  StreamCollection = require('./internal/stream_collection').StreamCollection;

  ChannelCollection = require('./internal/channel_collection').ChannelCollection;

  merge = function() {
    var array, i, key, len, res, value;
    res = {};
    for (i = 0, len = arguments.length; i < len; i++) {
      array = arguments[i];
      for (key in array) {
        value = array[key];
        res[key] = value;
      }
    }
    return res;
  };


  /**
   * @module rtc
   */


  /**
   * Represents a remote user of the room
   * @class rtc.RemotePeer
   * @extends rtc.Peer
  #
   * @constructor
   * @param {rtc.PeerConnection} peer_connection The underlying peer connection
   * @param {rtc.SignalingPeer} signaling The signaling connection to the peer
   * @param {rtc.LocalPeer} local The local peer
   * @param {Object} options The options object as passed to `Room`
   */

  exports.RemotePeer = (function(superClass) {
    extend(RemotePeer, superClass);


    /**
     * Message received from peer through signaling
     * @event message
     * @param data The payload of the message
     */


    /**
     * The remote peer left or signaling closed
     * @event left
     */


    /**
     * A new stream is available from the peer
     * @event stream_added
     * @param {String} name Name of the stream
     * @param {Promise -> rtc.Stream} stream Promise of the stream
     */


    /**
     * A new data channel is available from the peer
     * @event data_channel_added
     * @param {String} name Name of the channel
     * @param {Promise -> rtc.DataChannel} channel Promise of the channel
     */


    /**
     * The connection to the peer supplied by the signaling implementation
     * @property signaling
     * @type rtc.signaling.SignalingPeer
     */

    function RemotePeer(peer_connection, signaling, local, options1) {
      this.peer_connection = peer_connection;
      this.signaling = signaling;
      this.local = local;
      this.options = options1;
      this.private_streams = {};
      this.private_channels = {};
      this.stream_collection = new StreamCollection();
      this.streams = this.stream_collection.streams;
      this.streams_desc = {};
      this.stream_collection.on('stream_added', (function(_this) {
        return function(name, stream) {
          return _this.emit('stream_added', name, stream);
        };
      })(this));
      this.channel_collection = new ChannelCollection();
      this.channels = this.channel_collection.channels;
      this.channels_desc = {};
      this.channel_collection.on('data_channel_added', (function(_this) {
        return function(name, channel) {
          return _this.emit('data_channel_added', name, channel);
        };
      })(this));
      this.peer_connection.on('stream_added', (function(_this) {
        return function(stream) {
          return _this.stream_collection.resolve(stream);
        };
      })(this));
      this.peer_connection.on('data_channel_ready', (function(_this) {
        return function(channel) {
          return _this.channel_collection.resolve(channel);
        };
      })(this));
      this.peer_connection.on('signaling', (function(_this) {
        return function(data) {
          data.streams = _this.streams_desc;
          data.channels = _this.channels_desc;
          return _this.signaling.send('signaling', data);
        };
      })(this));
      this.signaling.on('signaling', (function(_this) {
        return function(data) {
          _this.stream_collection.update(data.streams);
          _this.channel_collection.setRemote(data.channels);
          return _this.peer_connection.signaling(data);
        };
      })(this));
      this.peer_connection.on('ice_candidate', (function(_this) {
        return function(candidate) {
          return _this.signaling.send('ice_candidate', candidate);
        };
      })(this));
      this.signaling.on('ice_candidate', (function(_this) {
        return function(candidate) {
          return _this.peer_connection.addIceCandidate(candidate);
        };
      })(this));
      this.signaling.on('status_changed', (function(_this) {
        return function(status) {
          return _this.emit('status_changed', status);
        };
      })(this));
      this.signaling.on('message', (function(_this) {
        return function(data) {
          return _this.emit('message', data);
        };
      })(this));
      this.signaling.on('left', (function(_this) {
        return function() {
          _this.peer_connection.close();
          return _this.emit('left');
        };
      })(this));
      this.peer_connection.on('connected', (function(_this) {
        return function() {};
      })(this));
      this.peer_connection.on('closed', (function(_this) {
        return function() {};
      })(this));
      if ((this.options.auto_connect == null) || this.options.auto_connect) {
        this.connect();
      }
    }

    RemotePeer.prototype.status = function(key) {
      return this.signaling.status[key];
    };


    /**
     * Send a message to the peer through signaling
     * @method message
     * @param data The payload
     * @return {Promise} Promise which is resolved when the data was sent
     */

    RemotePeer.prototype.message = function(data) {
      return this.signaling.send('message', data);
    };


    /**
     * Connect to the remote peer to exchange streams and create data channels
     * @method connect
     * @return {Promise} Promise which will resolved when the connection is established
     */

    RemotePeer.prototype.connect = function() {
      var name, promise, ref, stream, stream_promises;
      if (this.connect_p == null) {
        stream_promises = [];
        ref = merge(this.local.streams, this.private_streams);
        for (name in ref) {
          stream = ref[name];
          promise = stream.then(function(stream) {
            return [name, stream];
          });
          stream_promises.push(promise);
        }
        this.connect_p = Promise.all(stream_promises).then((function(_this) {
          return function(streams) {
            var i, len, options, ref1, ref2;
            for (i = 0, len = streams.length; i < len; i++) {
              ref1 = streams[i], name = ref1[0], stream = ref1[1];
              _this.peer_connection.addStream(stream);
              _this.streams_desc[name] = stream.id();
            }
            ref2 = merge(_this.local.channels, _this.private_channels);
            for (name in ref2) {
              options = ref2[name];
              _this.peer_connection.addDataChannel(name, options);
              _this.channels_desc[name] = options;
            }
            _this.channel_collection.setLocal(_this.channels_desc);
            return _this.peer_connection.connect();
          };
        })(this));
      }
      return this.connect_p;
    };


    /**
     * Closes the connection to the peer
     * @method close
     */

    RemotePeer.prototype.close = function() {
      this.peer_connection.close();
    };


    /**
     * Get a stream from the peer. Has to be sent by the remote peer to succeed.
     * @method stream
     * @param {String} [name='stream'] Name of the stream
     * @return {Promise -> rtc.Stream} Promise of the stream
     */

    RemotePeer.prototype.stream = function(name) {
      if (name == null) {
        name = this.DEFAULT_STREAM;
      }
      return this.stream_collection.get(name);
    };


    /**
     * Add local stream to be sent to this remote peer
    #
     * If you use this method you have to set `auto_connect` to `false` in the options object and call `connect()` manually on all remote peers.
    #
     * @method addStream
     * @param {String} [name='stream'] Name of the stream
     * @param {Promise -> rtc.Stream | rtc.Stream | Object} stream The stream, a promise to the stream or the configuration to create a stream with `rtc.Stream.createStream()`
     * @return {Promise -> rtc.Stream} Promise of the stream which was added
     */

    RemotePeer.prototype.addStream = function(name, obj) {
      var saveStream, stream_p;
      if (!(this.options.auto_connect === false)) {
        return Promise.reject("Unable to add streams directly to remote peers without 'auto_connect' option set to 'false'");
      }
      saveStream = (function(_this) {
        return function(stream_p) {
          _this.private_streams[name] = stream_p;
          return stream_p;
        };
      })(this);
      if (typeof name !== 'string') {
        obj = name;
        name = this.DEFAULT_STREAM;
      }
      if ((obj != null ? obj.then : void 0) != null) {
        return saveStream(obj);
      } else if (obj instanceof Stream) {
        return saveStream(Promise.resolve(obj));
      } else {
        stream_p = Stream.createStream(obj);
        return saveStream(stream_p);
      }
    };


    /**
     * Get a data channel to the remote peer. Has to be added by local and remote side to succeed.
     * @method channel
     * @param {String} [name='data'] Name of the data channel
     * @return {Promise -> rtc.DataChannel} Promise of the data channel
     */

    RemotePeer.prototype.channel = function(name) {
      if (name == null) {
        name = this.DEFAULT_CHANNEL;
      }
      return this.channel_collection.get(name);
    };


    /**
     * Add data channel which will be negotiated with this remote peer
    #
     * If you use this method you have to set `auto_connect` to `false` in the options object and call `connect()` manually on all remote peers.
    #
     * @method addDataChannel
     * @param {String} [name='data'] Name of the data channel
     * @param {Object} [desc={ordered: true}] Options passed to `RTCDataChannel.createDataChannel()`
     */

    RemotePeer.prototype.addDataChannel = function(name, desc) {
      if (!(this.options.auto_connect === false)) {
        return Promise.reject("Unable to add channels directly to remote peers without 'auto_connect' option set to 'false'");
      }
      if (typeof name !== 'string') {
        desc = name;
        name = this.DEFAULT_CHANNEL;
      }
      if (desc == null) {
        desc = {
          ordered: true
        };
      }
      this.private_channels[name] = desc;
      return this.channel(name);
    };


    /**
     * Checks whether the peer is the local peer. Returns always `false` on this
     * class.
     * @method isLocal
     * @return {Boolean} Returns `false`
     */

    RemotePeer.prototype.isLocal = function() {
      return false;
    };

    return RemotePeer;

  })(Peer);

}).call(this);

},{"./internal/channel_collection":3,"./internal/promise":4,"./internal/stream_collection":5,"./peer":8}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var EventEmitter, LocalPeer, MucSignaling, PeerConnection, RemotePeer, WebSocketChannel,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  WebSocketChannel = require('./signaling/web_socket_channel').WebSocketChannel;

  MucSignaling = require('./signaling/muc_signaling').MucSignaling;

  RemotePeer = require('./remote_peer').RemotePeer;

  LocalPeer = require('./local_peer').LocalPeer;

  PeerConnection = require('./peer_connection').PeerConnection;


  /**
   * @module rtc
   */


  /**
   * A virtual room which connects multiple Peers
   * @class rtc.Room
  #
   * @constructor
   * @param {String} name The name of the room. Will be passed on to signaling
   * @param {rtc.Signaling | String} signaling The signaling to be used. If you pass a string it will be interpreted as a websocket address and a palava signaling connection will be established with it.
   * @param {Object} [options] Various options to be used in connections created by this room
   * @param {Boolean} [options.auto_connect=true] Whether remote peers are connected automatically or an explicit `RemotePeer.connect()` call is needed
   * @param {String} [options.stun] The URI of the STUN server to use
   * @param {rtc.LocalPeer} [options.local] The local user
   */

  exports.Room = (function(superClass) {
    extend(Room, superClass);


    /**
     * A new peer is encountered in the room. Fires on new remote peers after joining and for all peers in the room when joining.
     * @event peer_jopined
     * @param {rtc.RemotePeer} peer The new peer
     */


    /**
     * A peer left the room.
     * @event peer_left
     * @param {rtc.RemotePeer} peer The peer which left
     */


    /**
     * A peer changed its status.
     * @event peer_status_changed
     * @param {rtc.RemotePeer} peer The peer which changed its status
     * @param {Object} status The new status
     */


    /**
     * The connection to the room was closed
     * @event closed
     */


    /**
     * The underlying signaling implementation as provided in constructor
     * @property signaling
     * @type rtc.signaling.Signaling
     */


    /**
     * The local peer
     * @property local
     * @type rtc.LocalPeer
     */

    function Room(signaling, options) {
      var channel;
      this.signaling = signaling;
      this.options = options != null ? options : {};
      if (typeof this.signaling === 'string' || this.signaling instanceof String) {
        channel = new WebSocketChannel(this.signaling);
        this.signaling = new MucSignaling(channel);
      }
      this.local = this.options.local || new LocalPeer();
      this.signaling.setStatus(this.local._status);
      this.local.on('status_changed', (function(_this) {
        return function() {
          return _this.signaling.setStatus(_this.local._status);
        };
      })(this));
      this.signaling.on('peer_joined', (function(_this) {
        return function(signaling_peer) {
          var pc, peer;
          pc = new PeerConnection(signaling_peer.first, _this.options);
          peer = _this.createPeer(pc, signaling_peer);
          peer.on('status_changed', function(status) {
            return _this.emit('peer_status_changed', peer, status);
          });
          peer.on('left', function() {
            delete _this.peers[signaling_peer.id];
            return _this.emit('peer_left', peer);
          });
          _this.peers[signaling_peer.id] = peer;
          _this.emit('peer_joined', peer);
          return peer.on('closed', function() {
            return delete _this.peers[signaling_peer.id];
          });
        };
      })(this));
      this.peers = {};
    }


    /**
     * Joins the room. Initiates connection to signaling server if not done before.
     * @method join
     * @return {Promise} A promise which will be resolved once the room was joined
     */

    Room.prototype.connect = function() {
      if (this.join_p == null) {
        this.join_p = this.signaling.connect();
      }
      return this.join_p;
    };


    /**
     * Leaves the room and closes all established peer connections
     * @method leave
     */

    Room.prototype.leave = function() {
      return this.signaling.leave();
    };


    /**
     * Cleans up all resources used by the room.
     * @method leave
     */

    Room.prototype.destroy = function() {
      return this.signaling.leave();
    };


    /**
     * Creates a remote peer. Overwrite to use your own class for peers.
     * @private
     * @method create_peer
     * @param {rtc.PeerConnection} pc The PeerConnection to the peer
     * @param {rtc.SignalingPeer} signaling_peer The signaling connection to the peer
     */

    Room.prototype.createPeer = function(pc, signaling_peer) {
      return new RemotePeer(pc, signaling_peer, this.local, this.options);
    };

    return Room;

  })(EventEmitter);

}).call(this);

},{"./local_peer":7,"./peer_connection":9,"./remote_peer":10,"./signaling/muc_signaling":13,"./signaling/web_socket_channel":16,"events":undefined}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var Calling, CallingInInvitation, CallingInvitationRoom, CallingNamespace, CallingNamespaceRoom, CallingNamespaceRoomPeer, CallingNamespaceUser, CallingOutInvitation, CallingPeer, CallingRoom, CallingSignaling, CallingSignalingPeer, Deferred, EventEmitter, Promise, RemotePeer, Room, extend, ref,
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  ref = require('../internal/promise'), Promise = ref.Promise, Deferred = ref.Deferred;

  extend = require('extend');

  Room = require('../room').Room;

  RemotePeer = require('../remote_peer').RemotePeer;

  Calling = (function(superClass) {
    extend1(Calling, superClass);

    function Calling(channel, room_options) {
      var hello_d;
      this.channel = channel;
      this.room_options = room_options;
      this.next_tid = 0;
      this.answers = {};
      hello_d = new Deferred();
      this.hello_p = hello_d.promise;
      this.channel.on('message', (function(_this) {
        return function(msg) {
          var answer, invitation, room;
          _this.resetPing();
          switch (msg.type) {
            case 'hello':
              _this.id = msg.id;
              return hello_d.resolve(msg.server);
            case 'answer':
              if (msg.tid == null) {
                console.log('Missing transaction id in answer');
                return;
              }
              answer = _this.answers[msg.tid];
              delete _this.answers[msg.tid];
              if (answer == null) {
                console.log('Answer without expecting it');
                return;
              }
              if (answer.resolve != null) {
                if (msg.error != null) {
                  return answer.reject(new Error(msg.error));
                } else {
                  return answer.resolve(msg.data);
                }
              } else {
                if (msg.error != null) {
                  return answer(new Error(msg.error));
                } else {
                  return answer(void 0, msg.data);
                }
              }
              break;
            case 'invite_incoming':
              if ((msg.handle == null) || (msg.sender == null) || !msg.room || (msg.status == null) || (msg.peers == null) || (msg.data == null)) {
                console.log("Invalid message");
                return;
              }
              invitation = new CallingInInvitation(_this, msg.handle);
              room = new CallingInvitationRoom(invitation, _this.room_options, msg.sender, msg.data);
              room.signaling.init(msg);
              return _this.emit('invitation', room);
          }
        };
      })(this));
      this.channel.on('closed', (function(_this) {
        return function() {
          _this.emit('closed');
          if (_this.ping_interval) {
            clearInterval(_this.ping_interval);
            return delete _this.ping_interval;
          }
        };
      })(this));
    }

    Calling.prototype.connect = function() {
      return this.channel.connect().then((function(_this) {
        return function() {
          _this.resetPing();
          return _this.hello_p;
        };
      })(this));
    };

    Calling.prototype.request = function(msg, cb) {
      var defer;
      msg.tid = this.next_tid++;
      this.channel.send(msg);
      this.resetPing();
      if (cb != null) {
        this.answers[msg.tid] = cb;
      } else {
        defer = new Deferred();
        this.answers[msg.tid] = defer;
        return defer.promise;
      }
    };

    Calling.prototype.ping = function() {
      return this.request({
        type: 'ping'
      });
    };

    Calling.prototype.resetPing = function() {
      if (this.ping_timeout) {
        clearTimeout(this.ping_timeout);
      }
      return this.ping_timeout = setTimeout((function(_this) {
        return function() {
          _this.ping();
          return _this.resetPing();
        };
      })(this), 2 * 60 * 1000);
    };

    Calling.prototype.subscribe = function(nsid) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.request({
            type: 'ns_subscribe',
            namespace: nsid
          }, function(err, data) {
            var id, namespace, ref1, ref2, room, status;
            if (err != null) {
              return reject(err);
            } else {
              namespace = new CallingNamespace(_this, nsid);
              ref1 = data.users;
              for (id in ref1) {
                status = ref1[id];
                namespace.addUser(id, status);
              }
              ref2 = data.rooms;
              for (id in ref2) {
                room = ref2[id];
                namespace.addRoom(id, room.status, room.peers);
              }
              return resolve(namespace);
            }
          });
        };
      })(this));
    };

    Calling.prototype.register = function(namespace) {
      return this.request({
        type: 'ns_user_register',
        namespace: namespace
      });
    };

    Calling.prototype.unregister = function(namespace) {
      return this.request({
        type: 'ns_user_unregister',
        namespace: namespace
      });
    };

    Calling.prototype.room = function(room, options) {
      var signaling;
      signaling = this.room_signaling(room);
      return new CallingRoom(signaling, options || this.room_options);
    };

    Calling.prototype.room_signaling = function(room) {
      return new CallingSignaling(this, (function(_this) {
        return function(status, cb) {
          return _this.request({
            type: 'room_join',
            room: room,
            status: status
          }, cb);
        };
      })(this));
    };

    Calling.prototype.setStatus = function(status) {
      return this.request({
        type: 'status',
        status: status
      });
    };

    Calling.prototype.close = function() {
      return this.channel.close();
    };

    return Calling;

  })(EventEmitter);

  CallingNamespace = (function(superClass) {
    extend1(CallingNamespace, superClass);

    function CallingNamespace(calling, id1) {
      var message_handler;
      this.calling = calling;
      this.id = id1;
      this.users = {};
      this.rooms = {};
      message_handler = (function(_this) {
        return function(msg) {
          var peer, room, user;
          if (msg.namespace !== _this.id) {
            return;
          }
          switch (msg.type) {
            case 'ns_user_add':
              if ((msg.user == null) || (msg.status == null)) {
                console.log('Invalid message');
                return;
              }
              return _this.addUser(msg.user, msg.status);
            case 'ns_user_update':
              if ((msg.user == null) || (msg.status == null)) {
                console.log('Invalid message');
                return;
              }
              user = _this.users[msg.user];
              if (user == null) {
                console.log('Unknown user in status change');
                return;
              }
              user.status = msg.status;
              _this.emit('user_changed', user);
              _this.emit('user_status_changed', user, user.status);
              return user.emit('status_changed', user.status);
            case 'ns_user_rm':
              if (msg.user == null) {
                console.log('Invalid message');
                return;
              }
              user = _this.users[msg.user];
              if (user == null) {
                console.log('Unknown user leaving');
                return;
              }
              delete _this.users[msg.user];
              _this.emit('user_changed', user);
              _this.emit('user_left', user);
              return user.emit('left');
            case 'ns_room_add':
              if ((msg.room == null) || (msg.status == null) || (msg.peers == null)) {
                console.log('Invalid message');
                return;
              }
              return _this.addRoom(msg.room, msg.status, msg.peers);
            case 'ns_room_update':
              if ((msg.room == null) || (msg.status == null)) {
                console.log('Invalid message');
                return;
              }
              room = _this.rooms[msg.room];
              if (room == null) {
                console.log('Invalid room');
                return;
              }
              room.status = msg.status;
              _this.emit('room_changed', room);
              _this.emit('room_status_changed', room, room.status);
              return room.emit('status_changed', room.status);
            case 'ns_room_rm':
              if (msg.room == null) {
                console.log('Invalid message');
                return;
              }
              room = _this.rooms[msg.room];
              if (room == null) {
                console.log('Invalid room');
                return;
              }
              delete _this.rooms[msg.room];
              _this.emit('room_changed', room);
              _this.emit('room_closed');
              return room.emit('closed');
            case 'ns_room_peer_add':
              if ((msg.room == null) || (msg.user == null) || (msg.status == null) || (msg.pending == null)) {
                console.log('Invalid message');
                return;
              }
              room = _this.rooms[msg.room];
              if (room == null) {
                console.log('Invalid room');
                return;
              }
              peer = room.addPeer(msg.user, msg.status, msg.pending);
              _this.emit('room_changed', room);
              return _this.emit('room_peer_joined', room, peer);
            case 'ns_room_peer_update':
              if ((msg.room == null) || (msg.user == null)) {
                console.log('Invalid message');
                return;
              }
              room = _this.rooms[msg.room];
              peer = room != null ? room.peers[msg.user] : void 0;
              if (peer == null) {
                console.log('Invalid peer');
                return;
              }
              if (msg.status != null) {
                peer.status = msg.status;
                _this.emit('room_changed', room);
                _this.emit('room_peer_status_changed', room, peer, peer.status);
                peer.emit('status_changed', peer.status);
              }
              if ((msg.pending != null) && msg.pending === false) {
                peer.pending = false;
                peer.accepted_d.resolve();
                _this.emit('room_changed', room);
                _this.emit('peer_accepted', peer);
                return peer.emit('accepted');
              }
              break;
            case 'ns_room_peer_rm':
              if ((msg.room == null) || (msg.user == null)) {
                console.log('Invalid message');
                return;
              }
              room = _this.rooms[msg.room];
              peer = room != null ? room.peers[msg.user] : void 0;
              if (peer == null) {
                console.log('Invalid peer');
                return;
              }
              delete _this.rooms[msg.room].peers[msg.user];
              _this.emit('room_changed', room);
              _this.emit('room_peer_left', room, peer);
              return peer.emit('left');
          }
        };
      })(this);
      this.calling.channel.on('message', message_handler);
      this.on('unsubscribed', (function(_this) {
        return function() {
          return _this.calling.channel.removeListener('message', message_handler);
        };
      })(this));
    }

    CallingNamespace.prototype.addUser = function(id, status) {
      var user;
      user = new CallingNamespaceUser(id, status);
      this.users[id] = user;
      this.emit('user_changed', user);
      this.emit('user_registered', user);
      return user;
    };

    CallingNamespace.prototype.addRoom = function(id, status, peers) {
      var peer, peer_id, room;
      room = new CallingNamespaceRoom(id, status);
      for (peer_id in peers) {
        peer = peers[peer_id];
        room.addPeer(peer_id, peer.status, peer.pending);
      }
      this.rooms[id] = room;
      this.emit('room_changed', room);
      this.emit('room_registered', room);
      return room;
    };

    CallingNamespace.prototype.unsubscribe = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.calling.request({
            type: 'ns_unsubscribe',
            namespace: _this.id
          }, function(err) {
            var _, ref1, user;
            if (err != null) {
              return reject(err);
            } else {
              ref1 = _this.users;
              for (_ in ref1) {
                user = ref1[_];
                user.emit('left');
              }
              _this.users = {};
              _this.emit('unsubscribed');
              return resolve();
            }
          });
        };
      })(this));
    };

    return CallingNamespace;

  })(EventEmitter);

  CallingNamespaceUser = (function(superClass) {
    extend1(CallingNamespaceUser, superClass);

    function CallingNamespaceUser(id1, status1, pending1) {
      this.id = id1;
      this.status = status1;
      this.pending = pending1;
    }

    return CallingNamespaceUser;

  })(EventEmitter);

  CallingNamespaceRoom = (function(superClass) {
    extend1(CallingNamespaceRoom, superClass);

    function CallingNamespaceRoom(id1, status1) {
      this.id = id1;
      this.status = status1;
      this.peers = {};
    }

    CallingNamespaceRoom.prototype.addPeer = function(id, status, pending) {
      var peer;
      peer = new CallingNamespaceRoomPeer(id, status, pending);
      this.peers[id] = peer;
      this.emit('peer_joined', peer);
      return peer;
    };

    return CallingNamespaceRoom;

  })(EventEmitter);

  CallingNamespaceRoomPeer = (function(superClass) {
    extend1(CallingNamespaceRoomPeer, superClass);

    function CallingNamespaceRoomPeer(id1, status1, pending1) {
      this.id = id1;
      this.status = status1;
      this.pending = pending1;
      this.accepted_d = new Deferred();
      if (!this.pending) {
        this.accepted_d.resolve();
      }
      this.on('left', (function(_this) {
        return function() {
          return _this.accepted_d.reject("Peer left");
        };
      })(this));
    }

    CallingNamespaceRoomPeer.prototype.accepted = function() {
      return this.accepted_d.promise;
    };

    return CallingNamespaceRoomPeer;

  })(EventEmitter);

  CallingSignaling = (function(superClass) {
    extend1(CallingSignaling, superClass);

    function CallingSignaling(calling, connect_fun) {
      var message_handler;
      this.calling = calling;
      this.connect_fun = connect_fun;
      this.peer_status = {};
      this.peers = {};
      this.initialized = false;
      message_handler = (function(_this) {
        return function(msg) {
          var peer;
          if (msg.room !== _this.id) {
            return;
          }
          switch (msg.type) {
            case 'room_update':
              if (msg.status == null) {
                console.log("Invalid message");
                return;
              }
              _this.status = msg.status;
              return _this.emit('status_changed', _this.status);
            case 'room_peer_add':
              if ((msg.user == null) || (msg.pending == null) || (msg.status == null)) {
                console.log("Invalid message");
                return;
              }
              return _this.addPeer(msg.user, msg.status, msg.pending, true);
            case 'room_peer_rm':
              console.log('removing');
              if (msg.user == null) {
                console.log("Invalid message");
                return;
              }
              peer = _this.peers[msg.user];
              if (peer == null) {
                console.log("Unknown peer accepted");
                return;
              }
              delete _this.peers[msg.user];
              peer.accepted_d.reject("User left");
              console.log('removed', _this.peers);
              _this.emit('peer_left', peer);
              return peer.emit('left');
            case 'room_peer_update':
              if (msg.user == null) {
                console.log("Invalid message");
                return;
              }
              peer = _this.peers[msg.user];
              if (peer == null) {
                console.log("Unknown peer accepted");
                return;
              }
              if (msg.status != null) {
                peer.status = msg.status;
                _this.emit('peer_status_changed', peer, peer.status);
                peer.emit('status_changed', peer.status);
              }
              if ((msg.pending != null) && msg.pending === false) {
                peer.pending = false;
                peer.accepted_d.resolve();
                _this.emit('peer_accepted');
                return peer.emit('accepted');
              }
              break;
            case 'room_peer_from':
              if ((msg.user == null) || (msg.event == null)) {
                console.log("Invalid message", msg);
                return;
              }
              peer = _this.peers[msg.user];
              if (peer == null) {
                console.log("Unknown peer accepted");
                return;
              }
              _this.emit('peer_left');
              return peer.emit(msg.event, msg.data);
          }
        };
      })(this);
      this.calling.channel.on('message', message_handler);
      this.on('left', (function(_this) {
        return function() {
          return _this.calling.channel.removeListener('message', message_handler);
        };
      })(this));
    }

    CallingSignaling.prototype.init = function(data) {
      var entry, ref1, user;
      if (this.initialized) {
        throw new Error("Room is already initialized");
      }
      if ((data.room == null) || (data.peers == null) || (data.status == null)) {
        console.log(data);
        throw new Error("Invalid initialization data");
      }
      this.id = data.room;
      this.status = data.status;
      ref1 = data.peers;
      for (user in ref1) {
        entry = ref1[user];
        this.addPeer(user, entry.status, entry.pending, false);
      }
      return this.initialized = true;
    };

    CallingSignaling.prototype.connect = function() {
      if (this.connect_p == null) {
        this.connect_p = new Promise((function(_this) {
          return function(resolve, reject) {
            return _this.connect_fun(_this.peer_status, function(err, res) {
              if (err != null) {
                return reject(err);
              } else {
                if (res != null) {
                  _this.init(res);
                }
                if (!_this.initialized) {
                  reject(new Error("Missing information from connect response"));
                  return;
                }
                return resolve();
              }
            });
          };
        })(this));
      }
      return this.connect_p;
    };

    CallingSignaling.prototype.addPeer = function(id, status, pending, first) {
      var peer;
      peer = new CallingSignalingPeer(this, id, status, pending, first);
      this.peers[id] = peer;
      this.emit('peer_joined', peer);
      return peer;
    };

    CallingSignaling.prototype.leave = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.calling.request({
            type: 'room_leave',
            room: _this.id
          }, function(err) {
            var _, peer, ref1;
            _this.emit('left');
            ref1 = _this.peers;
            for (_ in ref1) {
              peer = ref1[_];
              peer.emit('left');
              peer.accepted_d.reject("You left the room");
            }
            return resolve();
          });
        };
      })(this));
    };

    CallingSignaling.prototype.setStatus = function(status) {
      this.peer_status = status;
      if (this.connect_p != null) {
        return this.calling.request({
          type: 'room_peer_status',
          room: this.id,
          status: status
        });
      } else {
        return Promise.resolve();
      }
    };

    CallingSignaling.prototype.invite = function(user, data) {
      if (data == null) {
        data = {};
      }
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.calling.request({
            type: 'invite_send',
            room: _this.id,
            user: user.id,
            data: data
          }, function(err, res) {
            var invitation;
            if (err != null) {
              return reject(err);
            } else {
              if (res.handle == null) {
                reject(new Error("Invalid response"));
                return;
              }
              invitation = new CallingOutInvitation(_this.calling, res.handle, user);
              return resolve(invitation);
            }
          });
        };
      })(this));
    };

    CallingSignaling.prototype.setRoomStatusSafe = function(key, value, previous) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.calling.request({
            type: 'room_status',
            room: _this.id,
            key: key,
            value: value,
            check: true,
            previous: previous
          }, function(err) {
            if (err) {
              reject(err);
              return;
            }
            _this.status[key] = value;
            _this.emit('status_changed', _this.status);
            return resolve();
          });
        };
      })(this));
    };

    CallingSignaling.prototype.setRoomStatus = function(key, value) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.calling.request({
            type: 'room_status',
            room: _this.id,
            key: key,
            value: value
          }, function(err) {
            if (err) {
              reject(err);
              return;
            }
            _this.status[key] = value;
            _this.emit('status_changed', _this.status);
            return resolve();
          });
        };
      })(this));
    };

    CallingSignaling.prototype.register = function(namespace) {
      return this.calling.request({
        type: 'ns_room_register',
        namespace: namespace,
        room: this.id
      });
    };

    CallingSignaling.prototype.unregister = function(namespace) {
      return this.calling.request({
        type: 'ns_room_unregister',
        namespace: namespace,
        room: this.id
      });
    };

    return CallingSignaling;

  })(EventEmitter);

  CallingSignalingPeer = (function(superClass) {
    extend1(CallingSignalingPeer, superClass);

    function CallingSignalingPeer(room1, id1, status1, pending1, first1) {
      this.room = room1;
      this.id = id1;
      this.status = status1;
      this.pending = pending1;
      this.first = first1;
      this.accepted_d = new Deferred();
      if (!this.pending) {
        this.accepted_d.resolve();
      }
      return;
    }

    CallingSignalingPeer.prototype.accepted = function() {
      return this.accepted_d.promise;
    };

    CallingSignalingPeer.prototype.send = function(event, data) {
      return this.room.calling.request({
        type: 'room_peer_to',
        room: this.room.id,
        user: this.id,
        event: event,
        data: data
      });
    };

    return CallingSignalingPeer;

  })(EventEmitter);

  CallingInInvitation = (function(superClass) {
    extend1(CallingInInvitation, superClass);

    function CallingInInvitation(calling, handle, sender, data1) {
      var message_handler;
      this.calling = calling;
      this.handle = handle;
      this.sender = sender;
      this.data = data1;
      this.cancelled = false;
      message_handler = (function(_this) {
        return function(msg) {
          if (msg.handle !== _this.handle) {
            return;
          }
          switch (msg.type) {
            case 'invite_cancelled':
              _this.cancelled = true;
              _this.emit('cancelled');
              return _this.emit('handled', false);
          }
        };
      })(this);
      this.calling.channel.on('message', message_handler);
      this.on('handled', (function(_this) {
        return function() {
          return _this.calling.channel.removeListener('message', message_handler);
        };
      })(this));
      return;
    }

    CallingInInvitation.prototype.signaling = function() {
      return new CallingSignaling(this.calling, (function(_this) {
        return function(status, cb) {
          _this.emit('handled', true);
          return _this.calling.request({
            type: 'invite_accept',
            handle: _this.handle,
            status: status
          }, cb);
        };
      })(this));
    };

    CallingInInvitation.prototype.deny = function() {
      this.emit('handled', false);
      return this.calling.request({
        type: 'invite_deny',
        handle: this.handle
      });
    };

    return CallingInInvitation;

  })(EventEmitter);

  CallingOutInvitation = (function() {
    function CallingOutInvitation(calling, handle, user1) {
      var cleanup, message_handler;
      this.calling = calling;
      this.handle = handle;
      this.user = user1;
      this.defer = new Deferred();
      this.pending = true;
      message_handler = (function(_this) {
        return function(msg) {
          if (msg.handle !== _this.handle) {
            return;
          }
          switch (msg.type) {
            case 'invite_response':
              if (msg.accepted == null) {
                console.log("Invalid message");
                return;
              }
              _this.pending = false;
              return _this.defer.resolve(msg.accepted);
          }
        };
      })(this);
      this.calling.channel.on('message', message_handler);
      cleanup = (function(_this) {
        return function() {
          return _this.calling.channel.removeListener('message', message_handler);
        };
      })(this);
      this.defer.promise.then(cleanup, cleanup);
      return;
    }

    CallingOutInvitation.prototype.response = function() {
      return this.defer.promise;
    };

    CallingOutInvitation.prototype.cancel = function() {
      this.pending = false;
      return this.calling.request({
        type: 'invite_cancel',
        handle: this.handle
      }).then((function(_this) {
        return function() {
          _this.defer.reject(new Error("Invitation cancelled"));
        };
      })(this));
    };

    return CallingOutInvitation;

  })();

  CallingRoom = (function(superClass) {
    extend1(CallingRoom, superClass);

    function CallingRoom(signaling, options) {
      options = extend({
        auto_connect: false
      }, options);
      CallingRoom.__super__.constructor.call(this, signaling, options);
    }

    CallingRoom.prototype.createPeer = function(pc, signaling) {
      return new CallingPeer(pc, signaling, this.local, this.options);
    };

    CallingRoom.prototype.invite = function(user) {
      return this.signaling.invite(user);
    };

    CallingRoom.prototype.register = function(nsid) {
      return this.signaling.register(nsid);
    };

    CallingRoom.prototype.unregister = function(nsid) {
      return this.signaling.unregister(nsid);
    };

    return CallingRoom;

  })(Room);

  CallingInvitationRoom = (function(superClass) {
    extend1(CallingInvitationRoom, superClass);

    function CallingInvitationRoom(invitation1, options, sender_id, data1) {
      this.invitation = invitation1;
      this.sender_id = sender_id;
      this.data = data1;
      CallingInvitationRoom.__super__.constructor.call(this, this.invitation.signaling(), options);
      this.invitation.on('cancelled', (function(_this) {
        return function() {
          return _this.emit('cancelled');
        };
      })(this));
      this.invitation.on('handled', (function(_this) {
        return function(accepted) {
          return _this.emit('handled', accepted);
        };
      })(this));
    }

    CallingInvitationRoom.prototype.sender = function() {
      return this.peers[this.sender_id];
    };

    CallingInvitationRoom.prototype.deny = function() {
      return this.invitation.deny();
    };

    return CallingInvitationRoom;

  })(CallingRoom);

  CallingPeer = (function(superClass) {
    extend1(CallingPeer, superClass);

    function CallingPeer(pc, signaling, local, options) {
      CallingPeer.__super__.constructor.call(this, pc, signaling, local, options);
    }

    CallingPeer.prototype.connect = function() {
      return this.signaling.accepted().then((function(_this) {
        return function() {
          return CallingPeer.__super__.connect.call(_this);
        };
      })(this));
    };

    return CallingPeer;

  })(RemotePeer);

  module.exports = {
    Calling: Calling,
    CallingNamespace: CallingNamespace,
    CallingNamespaceUser: CallingNamespaceUser,
    CallingNamespaceRoom: CallingNamespaceRoom,
    CallingNamespaceRoomPeer: CallingNamespaceRoomPeer,
    CallingSignaling: CallingSignaling,
    CallingSignalingPeer: CallingSignalingPeer,
    CallingInInvitation: CallingInInvitation,
    CallingOutInvitation: CallingOutInvitation
  };

}).call(this);

},{"../internal/promise":4,"../remote_peer":10,"../room":11,"events":undefined,"extend":undefined}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var Deferred, EventEmitter, Signaling, SignalingPeer, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Deferred = require('../internal/promise').Deferred;

  ref = require('./signaling'), Signaling = ref.Signaling, SignalingPeer = ref.SignalingPeer;

  EventEmitter = require('events').EventEmitter;


  /**
   * @module rtc.signaling
   */


  /**
   * Signaling peer for multi user chats.
  #
   * For a detailed description of the signaling protocol see `rtc.signaling.MucSignaling`
  #
   * @extends rtc.signaling.SignalingPeer
   * @class rtc.signaling.MucSignalingPeer
  #
   * @constructor
   * @param {rtc.signaling.Channel} channel The channel to the siganling server
   * @param {String} peer_id The id of the remote peer
   * @param {Object} status The status of the remote peer
   * @param {Boolean} first Whether the local peer was in the room before the remote peer
   */

  exports.MucSignalingPeer = (function(superClass) {
    extend(MucSignalingPeer, superClass);


    /**
     * The id of the remote peer
     * @property id
     * @type String
     */

    function MucSignalingPeer(channel, id, status1, first) {
      var recv_msg;
      this.channel = channel;
      this.id = id;
      this.status = status1;
      this.first = first;
      recv_msg = (function(_this) {
        return function(data) {
          if (data.peer !== _this.id) {
            return;
          }
          if (data.type == null) {
            return;
          }
          switch (data.type) {
            case 'from':
              if ((data.event == null) || (data.data == null)) {
                return;
              }
              return _this.emit(data.event, data.data);
            case 'peer_left':
              _this.emit('left');
              return _this.channel.removeListener('message', recv_msg);
            case 'peer_status':
              _this.status = data.status;
              return _this.emit('status_changed', _this.status);
          }
        };
      })(this);
      this.channel.on('message', recv_msg);
    }

    MucSignalingPeer.prototype.send = function(event, data) {
      if (data == null) {
        data = {};
      }
      return this.channel.send({
        type: 'to',
        peer: this.id,
        event: event,
        data: data
      });
    };

    return MucSignalingPeer;

  })(SignalingPeer);


  /**
   * Signaling for multi user chats
  #
   * The following messages are sent to the server:
  #
   *     // join the room. has to be sent before any other message.
   *     // response will be 'joined' on success
   *     // other peers in the room will get 'peer_joined'
   *     {
   *       "type": "join",
   *       "status": { .. status .. }
   *     }
  #
   *     // leave the room. server will close the connectino.
   *     {
   *       "type": "leave"
   *     }
  #
   *     // update status object
   *     // other peers will get 'peer_status'
   *     {
   *       "type": "status",
   *       "status": { .. status .. }
   *     }
  #
   *     // send message to a peer. will be received as 'from'
   *     {
   *       "type": "to",
   *       "peer": "peer_id",
   *       "event": "event_id",
   *       "data": { .. custom data .. }
   *     }
  #
   * The following messages are received form the server:
  #
   *     // joined the room. is the response to 'join'
   *     {
   *       "type": "joined",
   *       "id": "own_id",
   *       "peers": {
   *         "peer_id": { .. status .. }
   *       }
   *     }
  #
   *     // another peer joined the room.
   *     {
   *       "type": "peer_joined",
   *       "peer": "peer_id",
   *       "status": { .. status .. }
   *     }
  #
   *     // anosther peer updated its status object using 'status'
   *     {
   *       "type": "peer_status",
   *       "peer": "peer_id",
   *       "status": { .. status .. }
   *     }
  #
   *     // another peer left the room
   *     {
   *       "type": "peer_left",
   *       "peer": "peer_id"
   *     }
  #
   *     // message from another peer sent by 'to'
   *     {
   *       "type": "from",
   *       "peer": "peer_id",
   *       "event": "event_id",
   *       "data": { .. custom data .. }
   *     }
  #
   * The messages transmitted in the `to`/`from` messages are emitted as events in `MucSignalingPeer`
  #
   * @extends rtc.signaling.Signaling
   * @class rtc.signaling.MucSignaling
  #
   * @constructor
   * @param {rtc.signaling.Channel} channel The channel to the signaling server
   */

  exports.MucSignaling = (function(superClass) {
    extend(MucSignaling, superClass);


    /**
     * The id of the local peer. Only available after joining.
     * @property id
     * @type String
     */

    function MucSignaling(channel) {
      var join_d;
      this.channel = channel;
      this.status = {};
      join_d = new Deferred();
      this.join_p = join_d.promise;
      this.channel.on('closed', (function(_this) {
        return function() {
          return _this.emit('closed');
        };
      })(this));
      this.channel.on('message', (function(_this) {
        return function(data) {
          var peer, peer_id, ref1, status;
          if (data.type == null) {
            return;
          }
          switch (data.type) {
            case 'joined':
              if (data.peers == null) {
                return;
              }
              ref1 = data.peers;
              for (peer_id in ref1) {
                status = ref1[peer_id];
                peer = new exports.MucSignalingPeer(_this.channel, peer_id, status, false);
                _this.emit('peer_joined', peer);
              }
              _this.id = data.id;
              return join_d.resolve();
            case 'peer_joined':
              if (data.peer == null) {
                return;
              }
              peer = new exports.MucSignalingPeer(_this.channel, data.peer, data.status, true);
              return _this.emit('peer_joined', peer);
          }
        };
      })(this));
    }

    MucSignaling.prototype.connect = function() {
      if (this.connect_p == null) {
        this.connect_p = this.channel.connect().then((function(_this) {
          return function() {
            return _this.channel.send({
              type: 'join',
              status: _this.status
            });
          };
        })(this)).then((function(_this) {
          return function() {
            return _this.join_d;
          };
        })(this));
      }
      return this.connect_p;
    };

    MucSignaling.prototype.setStatus = function(status) {
      this.status = status;
      if (this.connect_p) {
        return this.connect_p.then((function(_this) {
          return function() {
            return _this.channel.send({
              type: 'status',
              status: status
            });
          };
        })(this));
      }
    };

    MucSignaling.prototype.leave = function() {
      return this.channel.send({
        type: 'leave'
      }).then(function() {
        return this.channel.close();
      });
    };

    return MucSignaling;

  })(Signaling);

}).call(this);

},{"../internal/promise":4,"./signaling":15,"events":undefined}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var Deferred, Signaling, SignalingPeer, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Deferred = require('../internal/promise').Deferred;

  ref = require('./signaling'), Signaling = ref.Signaling, SignalingPeer = ref.SignalingPeer;


  /**
   * @module rtc.signaling
   */


  /**
   * Signaling peer compatible with the framing of palava signaling
   * @class rtc.signaling.PalavaSignalingPeer
   * @extends rtc.signaling.SignalingPeer
   */

  exports.PalavaSignalingPeer = (function(superClass) {
    extend(PalavaSignalingPeer, superClass);

    function PalavaSignalingPeer(channel, id, status1, first) {
      var recv_msg;
      this.channel = channel;
      this.id = id;
      this.status = status1;
      this.first = first;
      recv_msg = (function(_this) {
        return function(data) {
          if (data.sender_id !== _this.id) {
            return;
          }
          if (data.event == null) {
            _this.send('error', "Invalid message");
            return;
          }
          return _this.emit(data.event, data.data);
        };
      })(this);
      this.channel.on('message', recv_msg);
      this.on('peer_updated_status', (function(_this) {
        return function(status) {
          return _this.emit('status_changed', status);
        };
      })(this));
      this.on('peer_left', (function(_this) {
        return function() {
          _this.emit('closed');
          return _this.channel.removeListener('message', recv_msg);
        };
      })(this));
    }

    PalavaSignalingPeer.prototype.send = function(event, data) {
      if (data == null) {
        data = {};
      }
      return this.channel.send({
        event: 'send_to_peer',
        peer_id: this.id,
        data: {
          event: event,
          data: data
        }
      });
    };

    return PalavaSignalingPeer;

  })(SignalingPeer);


  /**
   * Signaling implementation compatible with the framing of palava signaling
   * @class rtc.signaling.PalavaSignaling
   * @extends rtc.signaling.Signaling
   */

  exports.PalavaSignaling = (function(superClass) {
    extend(PalavaSignaling, superClass);

    function PalavaSignaling(channel, room1, status1) {
      var join_d;
      this.channel = channel;
      this.room = room1;
      this.status = status1;
      this.peers = {};
      this.joined = false;
      join_d = new Deferred();
      this.join_p = join_d.promise;
      this.channel.on('closed', (function(_this) {
        return function() {
          return _this.emit('closed');
        };
      })(this));
      this.channel.on('message', (function(_this) {
        return function(data) {
          var i, peer, ref1;
          if (data.event == null) {
            return;
          }
          switch (data.event) {
            case 'joined_room':
              if ((data.peers == null) || (data.own_id == null)) {
                return;
              }
              ref1 = data.peers;
              for (i in ref1) {
                data = ref1[i];
                peer = new exports.PalavaSignalingPeer(_this.channel, data.peer_id, data.status, false);
                _this.peers[data.peer_id] = peer;
                _this.emit('peer_joined', peer);
              }
              return join_d.resolve();
            case 'new_peer':
              if (data.peer_id == null) {
                return;
              }
              peer = new exports.PalavaSignalingPeer(_this.channel, data.peer_id, data.status, true);
              _this.peers[data.peer] = peer;
              return _this.emit('peer_joined', peer);
          }
        };
      })(this));
    }

    PalavaSignaling.prototype.connect = function() {
      if (this.connect_p == null) {
        this.connect_p = this.channel.connect().then((function(_this) {
          return function() {
            return _this.channel.send({
              event: 'join_room',
              room_id: room,
              status: status
            });
          };
        })(this));
      }
      return this.connect_p;
    };

    PalavaSignaling.prototype.set_status = function(status) {
      return this.channel.send({
        event: 'update_status',
        status: status
      });
    };

    PalavaSignaling.prototype.leave = function() {
      return this.channel.close();
    };

    return PalavaSignaling;

  })(Signaling);

}).call(this);

},{"../internal/promise":4,"./signaling":15}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var EventEmitter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;


  /**
   * @module rtc.signaling
   */


  /**
   * Concept of a class implementing signaling. Might use a `rtc.signaling.Channel` to abstract the connection to the server.
  #
   * You do not have to extend this claass, just implement the functionality.
  #
   * @extends events.EventEmitter
   * @class rtc.signaling.Signaling
   */

  exports.Signaling = (function(superClass) {
    extend(Signaling, superClass);

    function Signaling() {
      return Signaling.__super__.constructor.apply(this, arguments);
    }


    /**
     * A new peer joined the room
     * @event peer_joined
     * @param {rtc.signaling.SignalingPeer} peer The new peer
     */


    /**
     * The connection to the signaling server was closed
     * @event closed
     */


    /**
     * Establishes the connection with the signaling server
     * @method connect
     * @return {Promise} Promise which is resolved when the connection is established
     */

    Signaling.prototype.connect = function() {
      throw new Error("Not implemented");
    };


    /**
     * Closes the connection to the signaling server
     * @method close
     */

    Signaling.prototype.close = function() {
      throw new Error("Not implemented");
    };


    /**
     * Sets the local status object and broadcasts the change to the peers
     * @method setStatus
     * @param {Object} obj New status object
     */

    Signaling.prototype.setStatus = function(obj) {
      throw new Error("Not implemented");
    };

    return Signaling;

  })(EventEmitter);


  /**
   * Concept of a class implementing a signaling connection to a peer.
  #
   * You do not have to extend this class, just implement the functionality.
  #
   * @extends events.EventEmitter
   * @class rtc.signaling.SignalingPeer
   */

  exports.SignalingPeer = (function(superClass) {
    extend(SignalingPeer, superClass);

    function SignalingPeer() {
      return SignalingPeer.__super__.constructor.apply(this, arguments);
    }


    /**
     * The remote peer left the room
     * @event left
     */


    /**
     * Received a message from the remote peer
     * @event message
     * @param {String} event ID of the event
     * @param {Obejct} data Payload of the event
     */


    /**
     * The status object of the remote peer was updated
     * @event status_changed
     * @param {Object} status The new status
     */


    /**
     * The status object of the remote peer
     * @property status
     * @type Object
     * @readonly
     */


    /**
     * Whether the local user was in the room before the remote user (used to determine which peer will initiate the connection)
     * @property first
     * @type Boolean
     * @readonly
     */


    /**
     * Sends the event with the given payload to the remote peer
     * @method send
     * @param {String} event The id of the event
     * @param {Object} data The payload of the event
     * @return {Promise} Promise which will be resolved once the message is sent
     */

    SignalingPeer.prototype.send = function(event, data) {
      if (data == null) {
        data = {};
      }
      throw new Error("Not implemented");
    };

    return SignalingPeer;

  })(EventEmitter);


  /**
   * Concept of a class implementing a signaling channel. Might be used by signaling implementations to connect to a signaling server.
  #
   * You do not have to extend this class, just implement the functionality.
  #
   * @extends events.EventEmitter
   * @class rtc.signaling.Channel
   */

  exports.Channel = (function(superClass) {
    extend(Channel, superClass);

    function Channel() {
      return Channel.__super__.constructor.apply(this, arguments);
    }


    /**
     * A message was received from the signaling server
     * @event message
     * @param {Object} msg The received message
     */


    /**
     * The connection to the signaling server was closed
     * @event closed
     */


    /**
     * Establishes the connection with the signaling server
     * @method connect
     * @return {Promise} Promise which is resolved when the connection is established
     */

    Channel.prototype.connect = function() {
      throw new Error("Not implemented");
    };


    /**
     * Sends a message to the signaling server
     * @method send
     * @param {Object} msg The message to send
     * @return {Promise} Promise which is resolved when the message is sent
     */

    Channel.prototype.send = function(msg) {
      throw new Error("Not implemented");
    };


    /**
     * Closes the connection to the signaling server
     * @method close
     */

    Channel.prototype.close = function() {
      throw new Error("Not implemented");
    };

    return Channel;

  })(EventEmitter);

}).call(this);

},{"events":undefined}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var Channel, Promise,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Promise = require('../internal/promise').Promise;

  Channel = require('./signaling').Channel;


  /**
   * @module rtc.signaling
   */


  /**
   * @class rtc.signaling.WebSocketChannel
   * @extends rtc.signaling.Channel
   */

  exports.WebSocketChannel = (function(superClass) {
    extend(WebSocketChannel, superClass);

    function WebSocketChannel() {
      var address, i, len, part, parts;
      address = arguments[0], parts = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.address = address;
      if (parts.length > 0) {
        while (this.address.endsWith('/')) {
          this.address = this.address.substr(0, this.address.length - 1);
        }
        for (i = 0, len = parts.length; i < len; i++) {
          part = parts[i];
          this.address += '/' + encodeUriComponent(part);
        }
      }
    }

    WebSocketChannel.prototype.connect = function() {
      if (this.connect_p == null) {
        this.connect_p = new Promise((function(_this) {
          return function(resolve, reject) {
            var socket;
            socket = new WebSocket(_this.address);
            socket.onopen = function() {
              _this.socket = socket;
              return resolve();
            };
            socket.onerror = function(err) {
              delete _this.socket;
              _this.emit('error', err);
              return reject(new Error("Unable to connect to socket"));
            };
            socket.onmessage = function(event) {
              var data;
              try {
                data = JSON.parse(event.data);
              } catch (_error) {
                _this.emit('error', "Unable to parse incoming message");
                return;
              }
              return _this.emit('message', data);
            };
            return socket.onclose = function() {
              return _this.emit('closed');
            };
          };
        })(this));
      }
      return this.connect_p;
    };

    WebSocketChannel.prototype.send = function(msg) {
      var err;
      if (this.socket != null) {
        try {
          this.socket.send(JSON.stringify(msg));
          return Promise.resolve();
        } catch (_error) {
          err = _error;
          return Promise.reject(err);
        }
      } else {
        return Promise.reject(new Error("Trying to send on WebSocket without being connected"));
      }
    };

    WebSocketChannel.prototype.close = function() {
      var err;
      if (this.socket != null) {
        try {
          this.socket.close();
          return Promise.resolve();
        } catch (_error) {
          err = _error;
          return Promise.reject(err);
        }
      } else {
        return Promise.reject(new Error("Trying to close WebSocket without being connected"));
      }
    };

    return WebSocketChannel;

  })(Channel);

}).call(this);

},{"../internal/promise":4,"./signaling":15}],17:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var EventEmitter, compat,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  compat = require('./compat').compat;

  EventEmitter = require('events').EventEmitter;


  /**
   * @module rtc
   */


  /**
   * A wrapper around an HTML5 MediaStream
   * @class rtc.Stream
  #
   * @constructor
   * @param {RTCDataStream} stream The native stream
   */

  exports.Stream = (function(superClass) {
    extend(Stream, superClass);


    /**
     * Emitted when tracks are muted or unmuted. Only triggered when changes are
     * made through this objects mute functions.
     * @event mute_changed
     * @param {'audio' | 'video' | 'both'} type The type of tracks which changed
     * @param {Boolean} muted `true` if tracks were muted, `false` if they were unmuted
     */

    function Stream(stream) {
      this.stream = stream;
    }


    /**
     * Get the id of the stream. This is neither user defined nor human readable.
     * @method id
     * @return {String} The id of the underlying stream
     */

    Stream.prototype.id = function() {
      return this.stream.id;
    };


    /**
     * Checks whether the stream has any tracks of the given type
     * @method hasTracks
     * @param {'audio' | 'video' | 'both'} [type='both'] The type of track to check for
     * @return {Number} The amount of tracks of the given type
     */

    Stream.prototype.hasTracks = function(type) {
      return this.getTracks(type).length;
    };


    /**
     * Gets the tracks of the given type
     * @method getTracks
     * @param {'audio' | 'video' | 'both'} [type='both'] The type of tracks to get
     * @return {Array} An Array of the tracks
     */

    Stream.prototype.getTracks = function(type) {
      var vaudio, video;
      type = type.toLowerCase();
      if (type === 'audio') {
        return this.stream.getAudioTracks();
      } else if (type === 'video') {
        return this.stream.getVideoTracks();
      } else if (type === 'both') {
        video = this.stream.getVideoTracks();
        vaudio = this.stream.getAudioTracks();
        return video.concat(audio);
      } else {
        throw new Error("Invalid stream part '" + type + "'");
      }
    };


    /**
     * Checks whether a type of track is muted. If there are no tracks of the
     * specified type they will be considered muted
     * @param {'audio' | 'video' | 'both'} [type='audio'] The type of tracks
     * @return {Boolean} Whether the tracks are muted
     */

    Stream.prototype.muted = function(type) {
      var ref, tracks;
      if (type == null) {
        type = 'audio';
      }
      tracks = this.getTracks(type);
      if (tracks.length < 1) {
        return true;
      }
      return !((ref = tracks[0]) != null ? ref.enabled : void 0);
    };


    /**
     * Mutes or unmutes tracks of the stream
     * @method mute
     * @param {Boolean} [muted=true] Mute on `true` and unmute on `false`
     * @param {'audio' | 'video' | 'both'} [type='audio'] The type of tracks to mute or unmute
     * @return {Boolean} Whether the tracks were muted or unmuted
     */

    Stream.prototype.mute = function(muted, type) {
      var i, len, ref, track;
      if (muted == null) {
        muted = true;
      }
      if (type == null) {
        type = 'audio';
      }
      ref = this.getTracks(type);
      for (i = 0, len = ref.length; i < len; i++) {
        track = ref[i];
        track.enabled = !muted;
      }
      this.emit('mute_changed', type, muted);
      return muted;
    };


    /**
     * Toggles the mute state of tracks of the stream
     * @method toggleMute
     * @param {'audio' | 'video' | 'both'} [type='audio'] The type of tracks to mute or unmute
     * @return {Boolean} Whether the tracks were muted or unmuted
     */

    Stream.prototype.toggleMute = function(type) {
      var i, len, muted, ref, track, tracks;
      if (type == null) {
        type = 'audio';
      }
      tracks = this.getTracks(type);
      if (tracks.length < 1) {
        return true;
      }
      muted = !((ref = tracks[0]) != null ? ref.enabled : void 0);
      for (i = 0, len = tracks.length; i < len; i++) {
        track = tracks[i];
        track.enabled = !muted;
      }
      this.emit('mute_changed', type, muted);
      return muted;
    };


    /**
     * Stops the stream
     * @method stop
     */

    Stream.prototype.stop = function() {
      var i, len, ref, results, track;
      if (this.stream.getTracks != null) {
        ref = this.stream.getTracks();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          track = ref[i];
          results.push(track.stop());
        }
        return results;
      } else {
        return this.stream.stop();
      }
    };


    /**
     * Clones the stream. You can change both streams independently, for example
     * mute tracks. You will have to `stop()` both streams individually when you
     * are done.
    #
     * This is currently not supported in Firefox and expected to be implemented
     * in version 47. Use `Stream.canClone()` to check whether cloning is supported by
     * your browser.
    #
     * @method clone
     * @return {rtc.Stream} A clone of the stream
     */

    Stream.prototype.clone = function() {
      if (this.stream.clone == null) {
        throw new Error("Your browser does not support stream cloning. Firefox is expected to implement it in version 47.");
      }
      return new Stream(this.stream.clone());
    };


    /**
     * Checks whether cloning stream is supported by the browser. See `clone()`
     * for details
     * @static
     * @method canClone
     * @return {Boolean} `true` if cloning is supported, `false` otherwise
     */

    Stream.canClone = function() {
      return compat.MediaStream.prototype.clone != null;
    };


    /**
     * Creates a stream using `getUserMedia()`
     * @method createStream
     * @static
     * @param {Object} [config={audio: true, video: true}] The configuration to pass to `getUserMedia()`
     * @return {Promise -> rtc.Stream} Promise to the stream
    #
     * @example
     *     var stream = rtc.Stream.createStream({audio: true, video: false});
     *     rtc.MediaDomElement($('video'), stream);
     */

    Stream.createStream = function(config) {
      if (config == null) {
        config = {
          audio: true,
          video: true
        };
      }
      return new Promise(function(resolve, reject) {
        var success;
        success = function(native_stream) {
          return resolve(new Stream(native_stream));
        };
        return compat.getUserMedia(config, success, reject);
      });
    };

    return Stream;

  })(EventEmitter);

}).call(this);

},{"./compat":1,"events":undefined}],18:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var Peer, Stream;

  Stream = require('./stream').Stream;

  Peer = require('./peer').Peer;


  /**
   * @module rtc
   */


  /**
   * @class rtc.MediaDomElement
   */

  exports.MediaDomElement = (function() {
    function MediaDomElement(dom, data) {
      this.dom = dom;
      if (this.dom.jquery != null) {
        this.dom = this.dom[0];
      }
      this.attach(data);
    }

    MediaDomElement.prototype.attach = function(data) {
      if (data == null) {
        delete this.stream;
        this.dom.pause();
        return this.dom.src = null;
      } else if (data instanceof Stream) {
        this.stream = data;
        if (typeof mozGetUserMedia !== "undefined" && mozGetUserMedia !== null) {
          this.dom.mozSrcObject = data.stream;
        } else {
          this.dom.src = URL.createObjectURL(data.stream);
        }
        return this.dom.play();
      } else if (data instanceof Peer) {
        if (data.isLocal()) {
          this.mute();
        }
        return this.attach(data.stream());
      } else if ((data != null ? data.then : void 0) != null) {
        return data.then((function(_this) {
          return function(res) {
            return _this.attach(res);
          };
        })(this))["catch"]((function(_this) {
          return function(err) {
            return _this.error(err);
          };
        })(this));
      } else {
        return this.error("Tried to attach invalid data");
      }
    };

    MediaDomElement.prototype.error = function(err) {
      return console.log(err);
    };

    MediaDomElement.prototype.clear = function() {
      return this.attach();
    };

    MediaDomElement.prototype.mute = function(muted) {
      if (muted == null) {
        muted = true;
      }
      return this.dom.muted = muted;
    };

    MediaDomElement.prototype.toggleMute = function() {
      return this.dom.muted = !this.dom.muted;
    };

    return MediaDomElement;

  })();

}).call(this);

},{"./peer":8,"./stream":17}]},{},[6])(6)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
